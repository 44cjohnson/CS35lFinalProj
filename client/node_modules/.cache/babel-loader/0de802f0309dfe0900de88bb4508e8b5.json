{"ast":null,"code":"var _jsxFileName = \"/Users/colinjohnson/Desktop/35LFinalProj/CS35lFinalProj/client/src/Components/ExerciseList.js\";\nimport React, { Component } from \"react\";\nimport { Container, ListGroup, ListGroupItem, Button } from \"reactstrap\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport { getItems, deleteItem } from \"../actions/itemActions\";\nimport PropTypes from \"prop-types\";\nimport \"./ExerciseList.css\"; //onClick calls setState which adjusts the items in the state of the Exercise List\n//  and filters them so that if the item id is not equal to the id we click on will be passed on\n//  meaning that the one that has the same id will be deleted from the UI\n// We will also delete the item from the database separately\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ExerciseList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onDeleteClick = id => {\n      this.props.deleteItem(id);\n    };\n  }\n\n  //trigger rerendering\n  componentDidMount() {\n    this.props.getItems();\n  }\n\n  render() {\n    const {\n      items\n    } = this.props.item; //destructuring, pulling items from this.state(items)\n\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(ListGroup, {\n        children: /*#__PURE__*/_jsxDEV(TransitionGroup, {\n          className: \"exercise-list\",\n          children: items.map(({\n            _id,\n            name\n          }) => /*#__PURE__*/_jsxDEV(CSSTransition, {\n            timeout: 500,\n            classNames: \"fade\",\n            children: /*#__PURE__*/_jsxDEV(ListGroupItem, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                className: \"remove-btn\",\n                color: \"danger\",\n                size: \"sm\" //id comes from the item we got from this.props.item\n                ,\n                onClick: this.onDeleteClick.bind(this, _id),\n                children: \"\\xD7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 19\n              }, this), name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 17\n            }, this)\n          }, _id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nExerciseList.propTypes = {\n  getItems: PropTypes.func.isRequired,\n  item: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  item: state.item\n}); //state.item because of what we called it in index.js\n\n\nexport default connect(mapStateToProps, {\n  getItems,\n  deleteItem\n})(ExerciseList); //mapStateToProps allows us to map item state to component property to use in ExerciseList","map":{"version":3,"sources":["/Users/colinjohnson/Desktop/35LFinalProj/CS35lFinalProj/client/src/Components/ExerciseList.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","Button","CSSTransition","TransitionGroup","connect","getItems","deleteItem","PropTypes","ExerciseList","onDeleteClick","id","props","componentDidMount","render","items","item","map","_id","name","bind","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,aAA/B,EAA8CC,MAA9C,QAA4D,YAA5D;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,wBAA/C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,wBAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,oBAAP,C,CAEA;AACA;AACA;AACA;;;;AAEA,MAAMC,YAAN,SAA2BX,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAMnCY,aANmC,GAMlBC,EAAD,IAAQ;AACtB,WAAKC,KAAL,CAAWL,UAAX,CAAsBI,EAAtB;AACD,KARkC;AAAA;;AACnC;AACAE,EAAAA,iBAAiB,GAAG;AAClB,SAAKD,KAAL,CAAWN,QAAX;AACD;;AAMDQ,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKH,KAAL,CAAWI,IAA7B,CADO,CAC4B;;AACnC,wBACE,QAAC,SAAD;AAAA,6BACE,QAAC,SAAD;AAAA,+BACE,QAAC,eAAD;AAAiB,UAAA,SAAS,EAAC,eAA3B;AAAA,oBACGD,KAAK,CAACE,GAAN,CAAU,CAAC;AAAEC,YAAAA,GAAF;AAAOC,YAAAA;AAAP,WAAD,kBACT,QAAC,aAAD;AAAyB,YAAA,OAAO,EAAE,GAAlC;AAAuC,YAAA,UAAU,EAAC,MAAlD;AAAA,mCACE,QAAC,aAAD;AAAA,sCACE,QAAC,MAAD;AACE,gBAAA,SAAS,EAAC,YADZ;AAEE,gBAAA,KAAK,EAAC,QAFR;AAGE,gBAAA,IAAI,EAAC,IAHP,CAIE;AAJF;AAKE,gBAAA,OAAO,EAAE,KAAKT,aAAL,CAAmBU,IAAnB,CAAwB,IAAxB,EAA8BF,GAA9B,CALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAUGC,IAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,aAAoBD,GAApB;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAwBD;;AApCkC;;AAuCrCT,YAAY,CAACY,SAAb,GAAyB;AACvBf,EAAAA,QAAQ,EAAEE,SAAS,CAACc,IAAV,CAAeC,UADF;AAEvBP,EAAAA,IAAI,EAAER,SAAS,CAACgB,MAAV,CAAiBD;AAFA,CAAzB;;AAKA,MAAME,eAAe,GAAIC,KAAD,KAAY;AAClCV,EAAAA,IAAI,EAAEU,KAAK,CAACV;AADsB,CAAZ,CAAxB,C,CAGA;;;AAEA,eAAeX,OAAO,CAACoB,eAAD,EAAkB;AAAEnB,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAlB,CAAP,CAAmDE,YAAnD,CAAf,C,CACA","sourcesContent":["import React, { Component } from \"react\";\nimport { Container, ListGroup, ListGroupItem, Button } from \"reactstrap\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport { getItems, deleteItem } from \"../actions/itemActions\";\nimport PropTypes from \"prop-types\";\n\nimport \"./ExerciseList.css\";\n\n//onClick calls setState which adjusts the items in the state of the Exercise List\n//  and filters them so that if the item id is not equal to the id we click on will be passed on\n//  meaning that the one that has the same id will be deleted from the UI\n// We will also delete the item from the database separately\n\nclass ExerciseList extends Component {\n  //trigger rerendering\n  componentDidMount() {\n    this.props.getItems();\n  }\n\n  onDeleteClick = (id) => {\n    this.props.deleteItem(id);\n  };\n\n  render() {\n    const { items } = this.props.item; //destructuring, pulling items from this.state(items)\n    return (\n      <Container>\n        <ListGroup>\n          <TransitionGroup className=\"exercise-list\">\n            {items.map(({ _id, name }) => (\n              <CSSTransition key={_id} timeout={500} classNames=\"fade\">\n                <ListGroupItem>\n                  <Button\n                    className=\"remove-btn\"\n                    color=\"danger\"\n                    size=\"sm\"\n                    //id comes from the item we got from this.props.item\n                    onClick={this.onDeleteClick.bind(this, _id)}\n                  >\n                    &times;\n                  </Button>\n                  {name}\n                </ListGroupItem>\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n        </ListGroup>\n      </Container>\n    );\n  }\n}\n\nExerciseList.propTypes = {\n  getItems: PropTypes.func.isRequired,\n  item: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  item: state.item,\n});\n//state.item because of what we called it in index.js\n\nexport default connect(mapStateToProps, { getItems, deleteItem })(ExerciseList);\n//mapStateToProps allows us to map item state to component property to use in ExerciseList\n"]},"metadata":{},"sourceType":"module"}